import psycopg2
import pandas as pd
from psycopg2 import sql

# Connect to your PostgreSQL database
conn = psycopg2.connect(
    host="localhost",
    database="ocean",
    user="multiply",
    password="unlocked",
    port="5432"
)
cursor = conn.cursor()

# Pick 3 float_ids to test
sample_floats = ["D2902120", "D1900633", "D1900268"]

# Drop table if it exists
cursor.execute("DROP TABLE IF EXISTS argo_sample")
# Create metadata table
cursor.execute("""
CREATE TABLE argo_sample (
    float_id_clean TEXT PRIMARY KEY,
    summary TEXT
)
""")

# For each float, aggregate values with proper timestamp handling
for fid in sample_floats:
    query = """
    SELECT 
        MIN(time) as start_time,
        MAX(time) as end_time,
        MIN(depth) as min_depth,
        MAX(depth) as max_depth,
        AVG(temp) as avg_temp,
        AVG(sal) as avg_sal,
        AVG(lat) as avg_lat,
        AVG(lon) as avg_lon
    FROM argo_measurements
    WHERE float_id_clean = %s
    """
    
    cursor.execute(query, (fid,))
    result = cursor.fetchone()
    
    if not result or all(x is None for x in result):
        print(f"‚ö†Ô∏è  No data found for Float {fid}")
        continue
        
    # Unpack the result
    (start_time, end_time, min_depth, max_depth, avg_temp, avg_sal, avg_lat, avg_lon) = result
    
    # Format the summary
    start_time_str = start_time.strftime("%Y-%m-%d") if start_time else "unknown"
    end_time_str = end_time.strftime("%Y-%m-%d") if end_time else "unknown"
    min_depth_str = f"{min_depth:.1f}" if min_depth is not None else "unknown"
    max_depth_str = f"{max_depth:.1f}" if max_depth is not None else "unknown"
    avg_temp_str = f"{avg_temp:.2f}" if avg_temp is not None else "unknown"
    avg_sal_str = f"{avg_sal:.2f}" if avg_sal is not None else "unknown"
    avg_lat_str = f"{avg_lat:.2f}" if avg_lat is not None else "unknown"
    avg_lon_str = f"{avg_lon:.2f}" if avg_lon is not None else "unknown"
    
    summary = (
        f"Float {fid} operated from {start_time_str} to {end_time_str} "
        f"near ({avg_lat_str}¬∞N, {avg_lon_str}¬∞E). "
        f"Profiles range {min_depth_str}‚Äì{max_depth_str} m, "
        f"with mean temperature {avg_temp_str} ¬∞C and "
        f"mean salinity {avg_sal_str} PSU."
    )

    cursor.execute(
        "INSERT INTO argo_sample (float_id_clean, summary) VALUES (%s, %s)", 
        (fid, summary)
    )
    print(f"‚úÖ Added metadata for Float {fid}")

conn.commit()

# Verify the results
cursor.execute("SELECT * FROM argo_sample")
results = cursor.fetchall()
print("\nüìä Created entries:")
for row in results:
    print(f"Float ID: {row[0]}")
    print(f"Summary: {row[1]}")
    print("---")

conn.close()
print("üéâ Sample argo_sample table created with 3 floats.")
